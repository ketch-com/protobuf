import "protoc-gen-swagger/options/annotations.proto";
import "orlop.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
        title: "$$SERVICENAME$$";
        version: "$$SERVICEVERSION$$";
        contact: {
            name: "Ketch";
            url: "https://www.ketch.com/";
            email: "api@ketch.com";
        };
    };

    external_docs: {
        url: "https://ketch.confluence.com/ketch";
        description: "More about $$SERVICENAME$$";
    }

    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";

    security_definitions: {
        security: {
            key: "BearerAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }

    security: {
        security_requirement: {
            key: "BearerAuth";
            value: {};
        }
    }

    responses: {
        key: "400";
        value: {
            description: "Returned when an invalid request has been received.";
            schema: {
                json_schema: {
                    ref: ".orlop.ErrorMessage";
                }
            }
        }
    }

    responses: {
        key: "401";
        value: {
            description: "Returned when the user has not authenticated.";
            schema: {
                json_schema: {
                    ref: ".orlop.ErrorMessage";
                }
            }
        }
    }

    responses: {
        key: "403";
        value: {
            description: "Returned when the user does not have permission to access the resource.";
            schema: {
                json_schema: {
                    ref: ".orlop.ErrorMessage";
                }
            }
        }
    }

    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    ref: ".orlop.ErrorMessage";
                }
            }
        }
    }
};
